name: Deploy to GitHub Pages

on:
  # Trigger on push to main branch
  push:
    branches: [ main ]
  
  # Trigger on pull request to main branch
  pull_request:
    branches: [ main ]
  
  # Allow manual trigger from Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          # allow audit-fix to fail without breaking the job
          npm audit fix --audit-level high || true
          
      - name: Setup Pages configuration
        uses: actions/configure-pages@v4
        with:
          static_site_generator: next
          
      - name: Restore Next.js cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            
      - name: Run linting (if script exists)
        run: npm run lint --if-present
        
      - name: Type checking (if script exists)
        run: npm run type-check --if-present
        
      - name: Build & Export (produce ./out for Pages)
        run: |
          set -e
          npm run build
          # Try npm export script first, then fall back to npx next export.
          # --if-present on npm will exit 0 if script missing.
          if npm run export --if-present; then
            echo "Export via npm script completed."
          else
            echo "No npm export script found. Trying npx next export..."
            npx next export
          fi
          # Verify that the out directory exists (next export should create it)
          if [ ! -d "./out" ]; then
            echo "Error: ./out directory not found after export. Make sure your Next.js project supports static export (next export)." >&2
            ls -la
            exit 1
          fi
          touch ./out/.nojekyll
        env:
          NODE_ENV: production
          
      - name: Generate sitemap
        run: |
          mkdir -p ./out
          cat > ./out/sitemap.xml <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
            <url>
              <loc>https://mrrajat1809.github.io/priyanshu_portfolio/</loc>
              <lastmod>$(date -Iseconds)</lastmod>
              <changefreq>weekly</changefreq>
              <priority>1.0</priority>
            </url>
          </urlset>
          EOF
          
      - name: Upload artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Deployment job (only run on main branch)
  deploy:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
  # Lighthouse CI job (run on pull requests for performance monitoring)
  lighthouse:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true
          
  # Security scan job
  security:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install dependencies for security checks
        run: npm ci
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          
      - name: Run npm audit
        run: |
          npm audit --audit-level high || true
          npm audit --audit-level moderate --json > audit-results.json || true
          
      - name: Upload audit results
        uses: actions/upload-artifact@v3
        with:
          name: security-audit
          path: audit-results.json

  # Notify job (runs after deployment)
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify deployment status
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.deploy.result }}
          text: |
            Portfolio deployment ${{ needs.deploy.result }}!
            ðŸš€ Live at: https://mrrajat1809.github.io/priyanshu_portfolio
            ðŸ“Š Commit: ${{ github.sha }}
            ðŸ‘¤ Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
